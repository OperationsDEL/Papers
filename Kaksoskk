local function deletemap()
    while true do
        local spawnPrefabs = workspace:FindFirstChild("spawnPrefabs")
        if spawnPrefabs then
            local wildIslands = spawnPrefabs:FindFirstChild("WildIslands")
            if wildIslands then
                for _, child in ipairs(wildIslands:GetChildren()) do
                    if child.Name ~= "slime" then
                        child:Destroy()
                    end
                end
            end
        end
        task.wait(1)
    end
end

spawn(deletemap)

local function withdrawitems()
    while true do
        local player = game:GetService("Players").LocalPlayer
        local backpack = player:FindFirstChild("Backpack")
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local RemoteFolder = ReplicatedStorage.rbxts_include.node_modules["@rbxts"].net.out._NetManaged

        local hasPancake = backpack:FindFirstChild("pancakeFhanhorn") ~= nil
        local hasSushi = backpack:FindFirstChild("sushiDragonRoll") ~= nil

        if not hasPancake or not hasSushi then
            for _, island in ipairs(workspace.Islands:GetChildren()) do
                local blocks = island:FindFirstChild("Blocks")
                if blocks then
                    for _, block in ipairs(blocks:GetChildren()) do
                        if string.find(block.Name, "chest") and block:FindFirstChild("Contents") then
                            local contents = block.Contents

                            if not hasPancake then
                                for _, content in ipairs(contents:GetChildren()) do
                                    if content.Name == "pancakeFhanhorn" then
                                        RemoteFolder.CLIENT_CHEST_TRANSACTION:InvokeServer({
                                            ["chest"] = block,
                                            ["player_tracking_category"] = "join_from_web",
                                            ["amount"] = 60,
                                            ["tool"] = content,
                                            ["action"] = "withdraw"
                                        })
                                        break
                                    end
                                end
                            end

                            if not hasSushi then
                                for _, content in ipairs(contents:GetChildren()) do
                                    if content.Name == "sushiDragonRoll" then
                                        RemoteFolder.CLIENT_CHEST_TRANSACTION:InvokeServer({
                                            ["chest"] = block,
                                            ["player_tracking_category"] = "join_from_web",
                                            ["amount"] = 60,
                                            ["tool"] = content,
                                            ["action"] = "withdraw"
                                        })
                                        break
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end

        task.wait(3)
    end
end

spawn(withdrawitems)

local TweenService = game:GetService("TweenService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local VirtualInputManager = game:GetService("VirtualInputManager")
local camera = workspace.CurrentCamera

local AttackSlimes = false
local FarmSlime = true

local function GetTime(distance, speed)
    return distance / speed
end
local function autoDeleteBody()
    while true do
        if AttackSlimes == false then
            local player = game.Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            local root = character:FindFirstChild("HumanoidRootPart")
            if root then
                local bv = root:FindFirstChild("AutoTPVelocity")
                if bv then
                    bv:Destroy()
                end
            end
        end
        task.wait(0.1)
    end
end

spawn(autoDeleteBody)


local function GetClosestSlime()
    local player = Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    local closest = nil
    local shortestDist = math.huge
    for _, child in ipairs(workspace.WildernessIsland.Entities:GetChildren()) do
        if child.Name == "slime" and child:FindFirstChild("HumanoidRootPart") then
            local dist = (humanoidRootPart.Position - child.HumanoidRootPart.Position).Magnitude
            if dist < shortestDist then
                closest = child
                shortestDist = dist
            end
        end
    end
    return closest
end

local function FarmSlimes()
    while true do
        if AttackSlimes then
            local player = Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
            local closest = GetClosestSlime()
            if closest then
                local destination = closest.HumanoidRootPart.Position + Vector3.new(0, 8, 0)
                if not humanoidRootPart:FindFirstChild("AutoTPVelocity") then
                    local bv = Instance.new("BodyVelocity")
                    bv.Velocity = Vector3.new(0, 0, 0)
                    bv.MaxForce = Vector3.new(1e9, 1e9, 1e9)
                    bv.Name = "AutoTPVelocity"
                    bv.Parent = humanoidRootPart
                end
                local distance = (humanoidRootPart.Position - destination).Magnitude
                local speed = distance <= 8 and 9999999 or 30
                local duration = GetTime(distance, speed)
                local tween = TweenService:Create(humanoidRootPart, TweenInfo.new(duration, Enum.EasingStyle.Linear), {CFrame = CFrame.new(destination)})
                tween:Play()
            end
        end
        wait(0.01)
    end
end

spawn(FarmSlimes)

local function SlimeRemote()
    while true do
        if AttackSlimes then
            task.wait(0.01)
            local player = Players.LocalPlayer
            local gui = player.PlayerGui
            local closest = GetClosestSlime()
            if closest then
                local args = {
                    [1] = HttpService:GenerateGUID(false),
                    [2] = {
                        [1] = {
                            ["hitUnit"] = closest,
                            ["UiItXhnkf"] = "\7\240\159\164\163\240\159\164\161\7\n\7\n\7\nTwudhybaivliemzqrcNmf"
                        }
                    }
                }
                ReplicatedStorage.rbxts_include.node_modules["@rbxts"].net.out._NetManaged["jiqEhnmoMV/ZlgessyomwyEX"]:FireServer(unpack(args))
            end
        end
        wait(0.01)
    end
end

spawn(SlimeRemote)

local function autoclick()
    while true do
        if AttackSlimes then
            local size = camera.ViewportSize
            local center = Vector2.new(size.X / 2, size.Y / 2)
            VirtualInputManager:SendMouseButtonEvent(center.X, center.Y, 0, true, game, 0)
            VirtualInputManager:SendMouseButtonEvent(center.X, center.Y, 0, false, game, 0)
        end
        wait(0.3)
    end
end

spawn(autoclick)
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local function hasChestName(name)
    return string.find(name:lower(), "chest") ~= nil
end

local function TeleportToSlime()
while true do
    local player = Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local root = character:WaitForChild("HumanoidRootPart")
    local children = Players:GetPlayers()
    local foundPortal = false

    if #children == 1 then
        for _, island in ipairs(workspace.Islands:GetChildren()) do
            if island:IsA("Model") then
                local blocks = island:FindFirstChild("Blocks")
                if blocks then
                    for _, block in ipairs(blocks:GetChildren()) do
                        if block.Name == "portalToSpawn" then
                            local part = block:FindFirstChild("Part")
                            if part and part:IsA("BasePart") then
                                local distance = (root.Position - part.Position).Magnitude
                                if distance <= 1000 then
                                    AttackSlimes = false
                                    root.CFrame = part.CFrame
                                    task.wait(3)
                                    foundPortal = true
                                    break
                                end
                            end
                        end
                    end
                end
            end
            if foundPortal then break end
        end

        if not foundPortal then
            local pos1 = Vector3.new(148.12, 32.5, -739.05)
            local pos2 = Vector3.new(700.10, 195, -216)
            local dist1 = (root.Position - pos1).Magnitude
            local dist2 = (root.Position - pos2).Magnitude
            if dist1 <= dist2 then
                AttackSlimes = false
                root.CFrame = CFrame.new(pos1)
                task.wait(3)
            else
                repeat
                    AttackSlimes = true
                    task.wait()
                    for _, island in ipairs(workspace.Islands:GetChildren()) do
                        if island:IsA("Model") then
                            local blocks = island:FindFirstChild("Blocks")
                            if blocks then
                                for _, block in ipairs(blocks:GetChildren()) do
                                    if block.Name == "portalToSpawn" then
                                        local part = block:FindFirstChild("Part")
                                        if part and part:IsA("BasePart") then
                                            local distance = (root.Position - part.Position).Magnitude
                                            if distance <= 1000 then
                                                return
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                until (root.Position - pos1).Magnitude > (root.Position - pos2).Magnitude
            end
        end

    elseif #children == 2 then
        AttackSlimes = false
        task.wait(3)
        local localPlayer = Players.LocalPlayer
        local otherPlayer
        for _, p in ipairs(children) do
            if p ~= localPlayer then
                otherPlayer = p
                break
            end
        end

        local otherUserId = otherPlayer.UserId
        for _, island in ipairs(workspace.Islands:GetChildren()) do
            local owners = island:FindFirstChild("Owners")
            if owners then
                for _, val in ipairs(owners:GetChildren()) do
                    if val:IsA("NumberValue") and val.Value == otherUserId then
                        local args = {
                            [1] = {
                                ["island"] = island,
                            }
                        }
                        ReplicatedStorage.rbxts_include.node_modules["@rbxts"].net.out._NetManaged.CLIENT_VISIT_ISLAND_REQUEST:InvokeServer(unpack(args))

                        local blocks = island:FindFirstChild("Blocks")
                        if blocks then
                            for _, block in ipairs(blocks:GetChildren()) do
                                if hasChestName(block.Name) then
                                    local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
                                    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

                                    repeat
                                        local args = {
                                            [1] = {
                                                ["island"] = island,
                                            }
                                        }
                                        ReplicatedStorage.rbxts_include.node_modules["@rbxts"].net.out._NetManaged.CLIENT_VISIT_ISLAND_REQUEST:InvokeServer(unpack(args))

                                        local distance = (humanoidRootPart.Position - block.Position).Magnitude
                                        task.wait(1)
                                    until distance <= 200

                                    local backpack = localPlayer:FindFirstChild("Backpack")
                                    if backpack then
                                        local RemoteFolder = ReplicatedStorage.rbxts_include.node_modules["@rbxts"].net.out._NetManaged

                                        local found = false
                                        for _, item in ipairs(backpack:GetChildren()) do
                                            if item.Name == "stickyGearGreen" or item.Name == "stickyGearBlue" or item.Name == "stickyGearPink" or item.Name == "antlerHammer" or item.Name == "shieldAntler" or item.Name == "portalShardSlime" then
                                                found = true
                                                local Amount = 0
                                                if item:FindFirstChild("Amount") then
                                                    if item.Amount.Value >= 1250 then
                                                        Amount = 1250
                                                    else
                                                        Amount = item.Amount.Value
                                                    end
                                                end

                                                local remote = RemoteFolder.CLIENT_CHEST_TRANSACTION
                                                remote:InvokeServer({
                                                    ["chest"] = block,
                                                    ["player_tracking_category"] = "join_from_web",
                                                    ["amount"] = Amount,
                                                    ["tool"] = item,
                                                    ["action"] = "deposit"
                                                })
                                                task.wait(0.1)
                                            end
                                        end

                                        if not found then
                                            for _, item in ipairs(backpack:GetChildren()) do
                                                if item.Name == "pancakeFhanhorn" or item.Name == "sushiDragonRoll" then
                                                    local contents = block:FindFirstChild("Contents")
                                                    if contents then
                                                        for _, content in ipairs(contents:GetChildren()) do
                                                            if content.Name == item.Name then
                                                                local args = {
                                                                    [1] = {
                                                                        ["chest"] = block,
                                                                        ["player_tracking_category"] = "join_from_web",
                                                                        ["amount"] = 60,
                                                                        ["tool"] = item,
                                                                        ["action"] = "withdraw"
                                                                    }
                                                                }
                                                                RemoteFolder.CLIENT_CHEST_TRANSACTION:InvokeServer(unpack(args))
                                                                task.wait(0.1)
                                                            end
                                                        end
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                        break
                    end
                end
            end
        end
    end

    task.wait(3)
end
end

spawn(TeleportToSlime)





local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local function IsActive(imageId)
    local potionList = Players.LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("PotionList")
    for _, child in ipairs(potionList:GetChildren()) do
        if child:IsA("Frame") then
            for _, subChild in ipairs(child:GetChildren()) do
                if subChild:IsA("Frame") then
                    for _, last in ipairs(subChild:GetChildren()) do
                        if last:IsA("ImageLabel") and last.Image == imageId then
                            return true
                        end
                    end
                end
            end
        end
    end
    return false
end

local function EquipTool(toolName)
    for i = 0, 7 do
        if Players.LocalPlayer.Character:FindFirstChild(toolName) then break end
        Players.LocalPlayer.ClientHotbarIndex.Value = i
        wait()
    end
end

local function AutoEquipWeapon()
    local LocalPlayer = Players.LocalPlayer
    while true do
        local hasFhanhorn = false
        local hasSushi = false

        for _, item in ipairs(LocalPlayer.Backpack:GetChildren()) do
            if item.Name == "pancakeFhanhorn" and item:FindFirstChild("Amount") and item.Amount.Value >= 1 then
                hasFhanhorn = true
            elseif item.Name == "sushiDragonRoll" and item:FindFirstChild("Amount") and item.Amount.Value >= 1 then
                hasSushi = true
            end
        end

        local fhanhornActive = IsActive("rbxassetid://8109860244")
        local sushiActive = IsActive("rbxassetid://7981378557")

        if not fhanhornActive and hasFhanhorn then
            repeat EquipTool("pancakeFhanhorn") wait() until LocalPlayer.Character:FindFirstChild("pancakeFhanhorn")
            for _, child in ipairs(game.Workspace:GetChildren()) do
                if child.Name == LocalPlayer.Name then
                    local args = {["tool"] = child:FindFirstChild("pancakeFhanhorn")}
                    ReplicatedStorage.rbxts_include.node_modules["@rbxts"].net.out._NetManaged.CLIENT_EAT_FOOD:InvokeServer(args)
                end
            end
            wait(1)
        elseif not sushiActive and hasSushi then
            repeat EquipTool("sushiDragonRoll") wait() until LocalPlayer.Character:FindFirstChild("sushiDragonRoll")
            for _, child in ipairs(game.Workspace:GetChildren()) do
                if child.Name == LocalPlayer.Name then
                    local args = {["tool"] = child:FindFirstChild("sushiDragonRoll")}
                    ReplicatedStorage.rbxts_include.node_modules["@rbxts"].net.out._NetManaged.CLIENT_EAT_FOOD:InvokeServer(args)
                end
            end
            wait(1)
        else
            repeat EquipTool("rageblade") wait() until LocalPlayer.Character:FindFirstChild("rageblade")
        end

        wait(1)
    end
end

spawn(AutoEquipWeapon)


local timer = 0
local function TimerRun()
    while true do
        timer = timer + 1
        wait(1)
    end
end
spawn(TimerRun)


local function SendWebhook()
    while true do
        local HttpService = game:GetService("HttpService")
        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer
        local requestFunction = (syn and syn.request) or request or (http and http.request) or http_request

        local webhooks = {
            ["3-6"] = "https://discord.com/api/webhooks/1380901650503438436/mJCDUILkmdqvNRvSSh7XiiEwPUEE4uqa7ON1U8jaf1ULN0d-_Ji-YRaGaw1QmBoqJDYn",
            ["7-10"] = "https://discord.com/api/webhooks/1382537440551505930/SdjqZapnH0x5NQeaYtdcVFD1kq4Ru0NwvEkDTLP6Ey3dSi1SSJ8Z1Somg_a8DrbXygQV",
                   ["11-14"] = "https://discord.com/api/webhooks/1382537546705145856/kmHjfQZdAlsX9dZ-kGULncx90l9xIpdKiwNXBjv5TClnCb5_u5YPEE6kaqrF5l_Vxuuz",
["15-18"] = "https://discord.com/api/webhooks/1382537679287226408/5UfrcQzjDB7v5HFfiSyq3-ByKTtf_PMJeQ4rWTua-JBwzT7-CUAGGXN7t0OQ6onPbRo5",
["19-22"] = "https://discord.com/api/webhooks/1382538000667512962/cfdwYN69i_hZvPKBRjSRQDNaA1VgLSrlifeEZQOoSoDYEnwmUaiwJ6h3dYpdVpA549ml",

}

        local function getWebhookForUsername(name)
            local number = tonumber(string.match(name, "%d+$"))
            if number then
                if number >= 3 and number <= 6 then
                    return webhooks["3-6"]
                elseif number >= 7 and number <= 10 then
                    return webhooks["7-10"]
elseif number >= 11 and number <= 14 then
                    return webhooks["11-14"]
elseif number >= 15 and number <= 18 then
                    return webhooks["15-18"]
elseif number >= 19 and number <= 22 then
                    return webhooks["19-22"]


                end
            end
            return nil
        end

        local webhookUrl = getWebhookForUsername(LocalPlayer.Name)
        if not webhookUrl then return end

        local green, blue, pink = 0, 0, 0
        local pancake, dragonroll, shieldantler, hammerantler = 0, 0, 0, 0

        for _, item in ipairs(LocalPlayer.Backpack:GetChildren()) do
            if item.Name == "stickyGearGreen" and item:FindFirstChild("Amount") then
                green = item.Amount.Value
            elseif item.Name == "stickyGearBlue" and item:FindFirstChild("Amount") then
                blue = item.Amount.Value
            elseif item.Name == "stickyGearPink" and item:FindFirstChild("Amount") then
                pink = item.Amount.Value
            elseif item.Name == "pancakeFhanhorn" and item:FindFirstChild("Amount") then
                pancake = item.Amount.Value
            elseif item.Name == "sushiDragonRoll" and item:FindFirstChild("Amount") then
                dragonroll = item.Amount.Value
            elseif item.Name == "shieldAntler" and item:FindFirstChild("Amount") then
                shieldantler = item.Amount.Value
            elseif item.Name == "antlerHammer" and item:FindFirstChild("Amount") then
                hammerantler = item.Amount.Value
            end
        end

        local data = {
            ["content"] = LocalPlayer.Name .. " DATA :\n" ..
                "Sticky Green Gears : " .. green .. "\n" ..
                "Sticky Blue Gears : " .. blue .. "\n" ..
                "Sticky Pink Gears : " .. pink .. "\n" ..
                "Pancakes : " .. pancake .. "\n" ..
                "Dragon Roll : " .. dragonroll .. "\n" ..
                "Shield Antler : " .. shieldantler .. "\n" ..
                "Hammer Antler : " .. hammerantler .. "\n" ..
                "Server Active : " .. (timer or "N/A")
        }

        requestFunction({
            Url = webhookUrl,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = HttpService:JSONEncode(data)
        })

        wait(360)
    end
end

spawn(SendWebhook)
