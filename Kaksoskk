local function antiafk()
loadstring(game:HttpGet("https://raw.githubusercontent.com/hassanxzayn-lua/Anti-afk/main/antiafkbyhassanxzyn"))();
end
spawn(antiafk)



local function playermodifier()
    while true do
        wait(5)
        local hrp = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
            if not hrp:FindFirstChild("BodyVelocity") then
                local bv = Instance.new("BodyVelocity")
                bv.Velocity = Vector3.new(0, 0, 0)
                bv.MaxForce = Vector3.new(1e9, 1e9, 1e9)
                bv.Parent = hrp
            end
            for _, part in ipairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                end
            end
        end
    end
end

spawn(playermodifier)




local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local NetManaged = ReplicatedStorage.rbxts_include.node_modules["@rbxts"].net.out._NetManaged
local player = Players.LocalPlayer
local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart") or player.CharacterAdded:Wait():WaitForChild("HumanoidRootPart")

local soulbatchisland = "island"
local slimeisland = "island"
local stop = false
local officalcheck = false

local function PlayerCheck()
while true do
task.wait(1)
if Players:FindFirstChild("soulbatch4") then
stop = true
else
stop = false
end
end
end
spawn(PlayerCheck)

local function AutoPerms()
while true do
if player.Name == "lambtris53" then
for _, plr in ipairs(Players:GetPlayers()) do
local args = {
[1] = {
["accessRank"] = 3,
["player"] = plr
}
}
NetManaged.CLIENT_CHANGE_ISLAND_ACCESS_LEVEL:InvokeServer(unpack(args))
end
end
task.wait(5)
end
end
spawn(AutoPerms)

local function SetIslands()
while true do
task.wait(3)
local soulbatch = Players:FindFirstChild("soulbatch4")
local slime = Players:FindFirstChild("lambtris53")
for _, island in pairs(workspace.Islands:GetChildren()) do
local owners = island:FindFirstChild("Owners")
if owners then
for _, child in pairs(owners:GetChildren()) do
if child:IsA("NumberValue") then
if soulbatch and child.Value == soulbatch.UserId then
soulbatchisland = island.Name
elseif slime and child.Value == slime.UserId then
slimeisland = island.Name
end
end
end
end
end
end
end
spawn(SetIslands)

local function getBlocksOfIsland(name)
local isl = workspace.Islands:FindFirstChild(name)
if isl and isl:FindFirstChild("Blocks") then
return isl.Blocks:GetChildren()
end
return {}
end

local function AutoCollectFromTotems()
while true do
wait()
if workspace.Islands:FindFirstChild(slimeisland) then
for _, block in ipairs(getBlocksOfIsland(slimeisland)) do
if block.Name == "totemPineapple" and hrp and (block.Position - hrp.Position).Magnitude <= 100 then
local workerContents = block:FindFirstChild("WorkerContents")
if workerContents then
for _, item in ipairs(workerContents:GetChildren()) do
if item.Name == "pineappleHarvested" then
local args = {
[1] = {
["tool"] = item,
["UkOvamtydvkHSlqjbwGaxeezvfgtmcasShNxTad"] = "\7\240\159\164\163\240\159\164\161\7\n\7\n\7\nqsxlRbaoicRuVtnfBkCmofWahfZ"
}
}
NetManaged.CLIENT_TOOL_PICKUP_REQUEST:InvokeServer(unpack(args))
end
end
end
end
end
end
end
end

local function AutoHarvest()
while true do
wait(0.1)
if workspace.Islands:FindFirstChild(slimeisland) then
local leeks = {}
for _, v in pairs(getBlocksOfIsland(slimeisland)) do
if v.Name == "pineapple" and hrp and (v.Position - hrp.Position).Magnitude <= 50 and v:FindFirstChild("stage-3") then
table.insert(leeks, v)
end
end
table.sort(leeks, function(a, b)
return (a.Position - hrp.Position).Magnitude < (b.Position - hrp.Position).Magnitude
end)
for i = 1, math.min(20, #leeks) do
local target = leeks[i]
local args = {
[1] = {
["player"] = player,
["tukiqepvhyyBj"] = "\7\240\159\164\163\240\159\164\161\7\n\7\n\7\nFOenfsq",
["model"] = target
}
}
NetManaged.CLIENT_HARVEST_CROP_REQUEST:InvokeServer(unpack(args))
end
end
end
end
spawn(AutoHarvest)

local function autoreplant()
    while true do
        wait()
        if stop == false then
            local island = workspace.Islands:FindFirstChild(slimeisland)
            if island and island:FindFirstChild("Blocks") then
                for _, soil in ipairs(island.Blocks:GetChildren()) do
                    if soil.Name == "soil" and hrp and (soil.Position - hrp.Position).Magnitude <= 50 then
                        local adjustedPosition = soil.Position + Vector3.new(0, 3, 0)
                        local orientation = soil.CFrame - soil.CFrame.Position
                        local args2 = {
                            [1] = {
                                ["upperBlock"] = false,
                                ["cframe"] = CFrame.new(adjustedPosition) * CFrame.Angles(orientation:ToEulerAnglesXYZ()),
                                ["foaouddukLJgsWeqarxxCuFoWLvf"] = "\7\240\159\164\163\240\159\164\161\7\n\7\n\7\nUaEGjnxjhvDnxhZlbHrbjiAonkqdgm",
                                ["blockType"] = "pineapple"
                            }
                        }
                        NetManaged.CLIENT_BLOCK_PLACE_REQUEST:InvokeServer(unpack(args2))
                    end
                end
            end
        end
    end
end

spawn(autoreplant)

local function AutoTeleport()
    local choices = {"pineapple", "totemPineapple"}
    while true do
        task.wait(0.1)
        if not stop and workspace.Islands:FindFirstChild(slimeisland) and not officalcheck then
            local pick = choices[math.random(1, #choices)]
            local blocks = getBlocksOfIsland(slimeisland)
            local matching = {}
            for _, b in ipairs(blocks) do
                if b.Name == pick then
                    table.insert(matching, b)
                end
            end
            if #matching > 0 then
                local target = matching[math.random(1, #matching)]
                local pos = target.Position
                if target.Name == "totemPineapple" then
                    pos = pos + Vector3.new(0, 0, 10)
                end
                local dist = (pos - hrp.Position).Magnitude
                local time = dist / 20
                local tween = TweenService:Create(hrp, TweenInfo.new(time, Enum.EasingStyle.Linear), {CFrame = CFrame.new(pos)})
                tween:Play()
                tween.Completed:Wait()
            end
        end
    end
end

spawn(AutoTeleport)





local function isNearAnyBlockInIsland(islandName, radius)
local isl = workspace.Islands:FindFirstChild(islandName)
if not isl or not isl:FindFirstChild("Blocks") then return false end
for _, v in pairs(isl.Blocks:GetChildren()) do
if v:IsA("BasePart") or v:IsA("MeshPart") then
if (v.Position - hrp.Position).Magnitude <= radius then
return true
end
end
end
return false
end

local function PineappleDeposit()
while true do
task.wait(1)
if stop then
officalcheck = true
local Islands = workspace:WaitForChild("Islands")
repeat
task.wait(1)
local args = { [1] = { ["island"] = Islands:FindFirstChild(soulbatchisland) } }
NetManaged.CLIENT_VISIT_ISLAND_REQUEST:InvokeServer(unpack(args))
until isNearAnyBlockInIsland(soulbatchisland, 50)

local chest
local island = Islands:FindFirstChild(soulbatchisland)
if island and island:FindFirstChild("Blocks") then
for _, block in ipairs(island.Blocks:GetChildren()) do
if block.Name == "diamondChestT1" then
chest = block
break
end
end
end

if chest then
local Backpack = player.Backpack
while Backpack:FindFirstChild("pineappleHarvested") do
for _, tool in ipairs(Backpack:GetChildren()) do
if tool.Name == "pineappleHarvested" then
local amount = tool:FindFirstChild("Amount")
if amount then
local inputamount = math.min(amount.Value, 1000)
local args = {
[1] = {
["chest"] = chest,
["player_tracking_category"] = "join_from_web",
["amount"] = inputamount,
["tool"] = tool,
["action"] = "deposit"
}
}
NetManaged.CLIENT_CHEST_TRANSACTION:InvokeServer(unpack(args))
end
end
end
task.wait(1)
end
end

repeat task.wait(1) until not stop

repeat
task.wait(1)
local args2 = { [1] = { ["island"] = Islands:FindFirstChild(slimeisland) } }
NetManaged.CLIENT_VISIT_ISLAND_REQUEST:InvokeServer(unpack(args2))
until isNearAnyBlockInIsland(slimeisland, 50)

officalcheck = false
end
end
end
spawn(PineappleDeposit)

local function Sickle()
while true do
wait(0.2)
if not stop and workspace.Islands:FindFirstChild(slimeisland) then
local model = workspace.Islands:FindFirstChild(slimeisland)
local blocks = model:FindFirstChild("Blocks")
if blocks then
local pineapples = {}
for _, block in ipairs(blocks:GetChildren()) do
if block.Name == "pineapple" and block:FindFirstChild("stage-3") then
table.insert(pineapples, block)
end
end
table.sort(pineapples, function(a, b)
return (a.Position - hrp.Position).Magnitude < (b.Position - hrp.Position).Magnitude
end)
local closest = {}
for i = 1, math.min(7, #pineapples) do
table.insert(closest, pineapples[i])
end
if #closest > 0 then
for i = 0, 7 do
if player.Character:FindFirstChild("sickleDiamond") then break end
player.ClientHotbarIndex.Value = i
task.wait()
end
local args = {
[1] = "sickleDiamond",
[2] = closest
}
NetManaged.SwingSickle:InvokeServer(unpack(args))
end
end
end
end
end
spawn(Sickle)

local function StartScript()
if player.Name == "lambtris53" then
officalcheck = false
stop = false
spawn(AutoCollectFromTotems)
spawn(AutoHarvest)

spawn(autoreplant)
spawn(autoreplant)
spawn(autoreplant)
spawn(AutoTeleport)
else
repeat task.wait(1) until slimeisland ~= "island"
repeat
task.wait(1)
local args = { [1] = { ["island"] = workspace.Islands:FindFirstChild(slimeisland) } }
NetManaged.CLIENT_VISIT_ISLAND_REQUEST:InvokeServer(unpack(args))
until isNearAnyBlockInIsland(slimeisland, 40)
officalcheck = false
stop = false
spawn(AutoCollectFromTotems)
spawn(AutoHarvest)

spawn(autoreplant)
spawn(autoreplant)
spawn(autoreplant)

spawn(AutoTeleport)
end
end
spawn(StartScript)
