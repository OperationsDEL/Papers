


local function withdrawitems()
    while true do
        local player = game:GetService("Players").LocalPlayer
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local RemoteFolder = ReplicatedStorage.rbxts_include.node_modules["@rbxts"].net.out._NetManaged

        for _, island in ipairs(workspace.Islands:GetChildren()) do
            local blocks = island:FindFirstChild("Blocks")
            if blocks then
                for _, block in ipairs(blocks:GetChildren()) do
                    if string.find(block.Name, "chest") and block:FindFirstChild("Contents") then
                        local contents = block.Contents

                        for _, content in ipairs(contents:GetChildren()) do
                            if content.Name == "eggDeviled" then
                                RemoteFolder.CLIENT_CHEST_TRANSACTION:InvokeServer({
                                    ["chest"] = block,
                                    ["player_tracking_category"] = "join_from_web",
                                    ["amount"] = 60,
                                    ["tool"] = content,
                                    ["action"] = "withdraw"
                                })
                            end
                        end
                    end
                end
            end
        end

        task.wait(3)
    end
end

spawn(withdrawitems)








local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

local function BreakWood()
while true do
for _, island in ipairs(workspace.Islands:GetChildren()) do
local blocks = island:FindFirstChild("Blocks")
if blocks then
for _, block in ipairs(blocks:GetChildren()) do
if string.find(block.Name:lower(), "tree") and (block.Position - HumanoidRootPart.Position).Magnitude <= 40 then
coroutine.wrap(function()
local args = {
[1] = {
["xkpOrfvithbzcvKundjsvoamBnpkqBsXm"] = "\7\240\159\164\163\240\159\164\161\7\n\7\n\7\nkyaxebDphmkcyha",
["part"] = block,
["block"] = block,
}
}
game:GetService("ReplicatedStorage").rbxts_include.node_modules:FindFirstChild("@rbxts").net.out._NetManaged.CLIENT_BLOCK_HIT_REQUEST:InvokeServer(unpack(args))
end)()
end
end
end
end
wait()
end
end

spawn(BreakWood)


local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")

local localPlayer = Players.LocalPlayer
local HumanoidRootPart = localPlayer.Character:WaitForChild("HumanoidRootPart")
local RemoteFolder = ReplicatedStorage.rbxts_include.node_modules["@rbxts"].net.out._NetManaged

local function TeleportToWood()
	while true do
		if not HumanoidRootPart:FindFirstChild("TreeBodyVelocity") then
			local bv = Instance.new("BodyVelocity")
			bv.Name = "TreeBodyVelocity"
			bv.Velocity = Vector3.new(0, 0, 0)
			bv.MaxForce = Vector3.new(0, math.huge, 0)
			bv.Parent = HumanoidRootPart
		end

		local playerCount = #Players:GetPlayers()
		local selectedTree, closestDistance = nil, math.huge
		local BlocksFolder = nil

		for _, island in ipairs(workspace.Islands:GetChildren()) do
			local blocks = island:FindFirstChild("Blocks")
			if blocks then
				for _, block in ipairs(blocks:GetChildren()) do
					if string.find(block.Name:lower(), "tree") then
						local mag = (block.Position - HumanoidRootPart.Position).Magnitude
						if mag < closestDistance then
							selectedTree = block
							closestDistance = mag
							BlocksFolder = blocks.Parent
						end
					end
				end
			end
		end

		-- If 1 player: go to tree
		if selectedTree and playerCount == 1 then
			local tween = TweenService:Create(HumanoidRootPart, TweenInfo.new(closestDistance / 20, Enum.EasingStyle.Linear), {
				CFrame = CFrame.new(selectedTree.Position)
			})
			tween:Play()
			tween.Completed:Wait()
			task.wait()
		end

		-- If 2 players: go to diamond/chest blocks and deposit wood items
		if playerCount == 2 and BlocksFolder then
			local blocks = BlocksFolder:FindFirstChild("Blocks")
			if blocks then
				for _, block in ipairs(blocks:GetChildren()) do
					local lowerName = block.Name:lower()
					if string.find(lowerName, "chest") or string.find(lowerName, "diamond") then
						-- Tween to chest
						repeat
							local dist = (HumanoidRootPart.Position - block.Position).Magnitude
							local tween = TweenService:Create(HumanoidRootPart, TweenInfo.new(dist / 20, Enum.EasingStyle.Linear), {
								CFrame = CFrame.new(block.Position)
							})
							tween:Play()
							tween.Completed:Wait()
							task.wait()
						until (HumanoidRootPart.Position - block.Position).Magnitude <= 15

						-- Deposit wood items
						local backpack = localPlayer:FindFirstChild("Backpack")
						if backpack then
							while true do
								local foundWood = false
								for _, item in ipairs(backpack:GetChildren()) do
									if item:IsA("Tool") and string.find(item.Name:lower(), "wood") and item.Name ~= "woodAxe" then
										foundWood = true
										print(item.Name)

										local amount = 0
										if item:FindFirstChild("Amount") then
											if item.Amount.Value >= 1250 then
												amount = 1250
											else
												amount = item.Amount.Value
											end
										end

										RemoteFolder.CLIENT_CHEST_TRANSACTION:InvokeServer({
											["chest"] = block,
											["player_tracking_category"] = "join_from_web",
											["amount"] = amount,
											["tool"] = item,
											["action"] = "deposit"
										})

										task.wait()
									end
								end
								if not foundWood then break end
								task.wait()
							end
						end
						wait()
					end
				end
			end
		end

		wait()
	end
end

spawn(TeleportToWood)



local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local function IsActive(imageId)
    local potionList = Players.LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("PotionList")
    for _, child in ipairs(potionList:GetChildren()) do
        if child:IsA("Frame") then
            for _, subChild in ipairs(child:GetChildren()) do
                if subChild:IsA("Frame") then
                    for _, last in ipairs(subChild:GetChildren()) do
                        if last:IsA("ImageLabel") and last.Image == imageId then
                            return true
                        end
                    end
                end
            end
        end
    end
    return false
end

local function EquipTool(toolName)
    for i = 0, 7 do
        if Players.LocalPlayer.Character:FindFirstChild(toolName) then break end
        Players.LocalPlayer.ClientHotbarIndex.Value = i
        wait()
    end
end

local function AutoEquipWeapon()
    local LocalPlayer = Players.LocalPlayer
    while true do
        local hasFhanhorn = false

        for _, item in ipairs(LocalPlayer.Backpack:GetChildren()) do
            if item.Name == "eggDeviled" and item:FindFirstChild("Amount") and item.Amount.Value >= 1 then
                hasFhanhorn = true
            end
        end

        local fhanhornActive = IsActive("rbxassetid://7981378333")

        if not fhanhornActive and hasFhanhorn then
            repeat EquipTool("eggDeviled") wait() until LocalPlayer.Character:FindFirstChild("eggDeviled")
            for _, child in ipairs(game.Workspace:GetChildren()) do
                if child.Name == LocalPlayer.Name then
                    local args = {["tool"] = child:FindFirstChild("eggDeviled")}
                    ReplicatedStorage.rbxts_include.node_modules["@rbxts"].net.out._NetManaged.CLIENT_EAT_FOOD:InvokeServer(args)
                end
            end
            wait(1)
        else
            repeat EquipTool("voidMattock") wait() until LocalPlayer.Character:FindFirstChild("voidMattock")
        end

        wait(1)
    end
end

spawn(AutoEquipWeapon)


local timer = 0
local function TimerRun()
    while true do
        timer = timer + 1
        wait(1)
    end
end
spawn(TimerRun)

local function SendWebhook()
    while true do
        local HttpService = game:GetService("HttpService")
        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer
        local webhookUrl = "https://discord.com/api/webhooks/1233196606401019975/qIxgbxZsF4dwVkMkDNB_Ei-p7zWhGwQ4DoPlgraHwJOkhUedOaDH6PYLDeXtNElNOF4x"
        local requestFunction = (syn and syn.request) or request or (http and http.request) or http_request

        local woodItems = {}

        for _, item in ipairs(LocalPlayer.Backpack:GetChildren()) do
            local nameLower = item.Name:lower()
            if string.find(nameLower, "wood") and item:FindFirstChild("Amount") then
                table.insert(woodItems, item.Name .. ": " .. item.Amount.Value)
            end
        end

        if #woodItems > 0 then
            local message = "Player: " .. LocalPlayer.Name .. " | " .. table.concat(woodItems, " | ")

            local data = {
                ["content"] = message
            }

            requestFunction({
                Url = webhookUrl,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = HttpService:JSONEncode(data)
            })
        end

        wait(360)
    end
end

spawn(SendWebhook)




