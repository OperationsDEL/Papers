local TweenService = game:GetService("TweenService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local hrp = char:WaitForChild("HumanoidRootPart")
wait(5)
local bv = Instance.new("BodyVelocity")
bv.Name = "AutoTPVelocity"
bv.Velocity = Vector3.new(0,0,0)
bv.MaxForce = Vector3.new(1e9,1e9,1e9)
bv.Parent = hrp

RunService.Stepped:Connect(function()
    local c = player.Character
    if not c then return end
    for _, part in ipairs(c:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = false
        end
    end
end)

local NetManagedRoot = ReplicatedStorage:WaitForChild("rbxts_include"):WaitForChild("node_modules"):WaitForChild("@rbxts").net.out._NetManaged
local HarvestRemote = NetManagedRoot:FindFirstChild("CLIENT_HARVEST_CROP_REQUEST")
local ChestRemote = NetManagedRoot:FindFirstChild("CLIENT_CHEST_TRANSACTION")
local VisitRemote = NetManagedRoot:FindFirstChild("CLIENT_VISIT_ISLAND_REQUEST")

local function TeleportToVoid()
    local hubToVoid = workspace:FindFirstChild("spawnPrefabs") and workspace.spawnPrefabs:FindFirstChild("Rifts") and workspace.spawnPrefabs.Rifts:FindFirstChild("HubToVoid")
    local remote = NetManagedRoot:FindFirstChild("vnzYBeyivvjlaiqyQVtJjmGgKKnibnw/spejcsviPceqLpjk")
    if not hubToVoid or not remote then return end
    repeat
        local args = {
            [1] = "aa67bc20-36c0-4a87-8560-4b0197509b7d",
            [2] = {
                [1] = { rift = hubToVoid }
            }
        }
        remote:FireServer(unpack(args))
        task.wait(1)
    until (hrp.Position - Vector3.new(-10167, 110, 10298)).Magnitude <= 200
    task.wait()
end

local function TeleportToParasite()
    local blocks = workspace:FindFirstChild("WildernessBlocks")
    if not blocks then return end
    local closest, closestDist = nil, math.huge
    for _, child in ipairs(blocks:GetChildren()) do
        if child:IsA("BasePart") and child.Name == "voidParasite" then
            local d = (hrp.Position - child.Position).Magnitude
            if d < closestDist then
                closestDist = d
                closest = child
            end
        end
    end
    if closest then
        local dist = (hrp.Position - closest.Position).Magnitude
        local duration = math.max(0.01, dist / 25)
        local tween = TweenService:Create(hrp, TweenInfo.new(duration, Enum.EasingStyle.Linear), {CFrame = closest.CFrame})
        tween:Play()
        if (hrp.Position - closest.Position).Magnitude <= 20 then
            local args = {
                [1] = {
                    ["player"] = player,
                    ["model"] = closest,
                    ["tukiqepvhyyBj"] = "\7\240\159\164\163\240\159\164\161\7\n\7\n\7\nFOenfsq",
                }
            }
            HarvestRemote:InvokeServer(unpack(args))
        end
    end
end

local function DepositingScript(otherPlayer)
    local otherUserId = otherPlayer.UserId
    local islands = workspace:FindFirstChild("Islands")
    if not islands then return end
    for _, island in ipairs(islands:GetChildren()) do
        local owners = island:FindFirstChild("Owners")
        if owners then
            for _, val in ipairs(owners:GetChildren()) do
                if val:IsA("NumberValue") and val.Value == otherUserId then
                    local visitArgs = { [1] = { island = island } }
                    if VisitRemote then VisitRemote:InvokeServer(unpack(visitArgs)) end
                    task.wait(1)
                    local blocks = island:FindFirstChild("Blocks")
                    if not blocks then return end
                    local chestBlock = nil
                    for _, b in ipairs(blocks:GetChildren()) do
                        if string.find(b.Name:lower(), "chest") then
                            chestBlock = b
                            break
                        end
                    end
                    if not chestBlock then return end
                    repeat
                        if VisitRemote then VisitRemote:InvokeServer(unpack(visitArgs)) end
                        task.wait(1)
                    until (hrp.Position - chestBlock.Position).Magnitude <= 200
                    local backpack = player:FindFirstChild("Backpack")
                    if not backpack then return end
                    for _, item in ipairs(backpack:GetChildren()) do
                        if string.find(item.Name:lower(), "seed") then
                            local amount = 0
                            if item:FindFirstChild("Amount") then amount = math.min(item.Amount.Value, 1250) end
                            if ChestRemote then
                                ChestRemote:InvokeServer({
                                    chest = chestBlock,
                                    player_tracking_category = "join_from_web",
                                    amount = amount,
                                    tool = item,
                                    action = "deposit"
                                })
                            end
                            task.wait(0.5)
                        end
                    end
                    return
                end
            end
        end
    end
end

local function playersinserver()
    return #Players:GetPlayers()
end

while true do
    if playersinserver() == 1 then
        TeleportToVoid()
        task.wait()
        repeat
            TeleportToParasite()
            task.wait()
        until playersinserver() > 1
        task.wait()
    elseif playersinserver() > 1 then
        local plist = Players:GetPlayers()
        for _, p in ipairs(plist) do
            if p ~= player then
                DepositingScript(p)
                break
            end
        end
    end
    task.wait()
end
