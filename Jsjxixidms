



local function autoupgrade()
while true do

for _, child in ipairs(workspace.Map.Entities:GetChildren()) do
	if child:IsA("Model") then
		local value = child:GetAttribute("ID")
		print(value)
		
		if value then
			local args = {
				value
			}
			game:GetService("ReplicatedStorage"):WaitForChild("RemoteFunctions"):WaitForChild("UpgradeUnit"):InvokeServer(unpack(args))
		end
	end
end
wait(1)
end
end
spawn(autoupgrade)

local Positions = {
	Vector3.new(-332.281433, 63.38456726, -131.53578186),
	Vector3.new(-308.464569, 63.38456726, -131.53578186),
	Vector3.new(-308.667694, 63.38456726, -131.53578186)
}


local function autoplace()
	while true do
		for _, pos in ipairs(Positions) do
			-- Script generated by SimpleSpy - credits to exx#9394

local args = {
    [1] = "unit_gnome_npc",
    [2] = {
        ["Valid"] = true,
        ["Position"] = Vector3.new(-332.1462707519531, 63.38456726074219, -134.61106872558594),
        ["CF"] = CFrame.new(-332.1462707519531, 63.38456726074219, -134.61106872558594) * CFrame.Angles(-3.1415927410125732, -8.742277657347586e-08, -3.1415927410125732),
        ["Rotation"] = 180
    }
}

game:GetService("ReplicatedStorage").RemoteFunctions.PlaceUnit:InvokeServer(unpack(args))-- Script generated by SimpleSpy - credits to exx#9394

wait(3)
-- Script generated by SimpleSpy - credits to exx#9394

local args = {
    [1] = "unit_gnome_npc",
    [2] = {
        ["Valid"] = true,
        ["Position"] = Vector3.new(-309.78564453125, 63.38456726074219, -141.19989013671875),
        ["CF"] = CFrame.new(-309.78564453125, 63.38456726074219, -141.19989013671875) * CFrame.Angles(-3.1415927410125732, -8.742277657347586e-08, -3.1415927410125732),
        ["Rotation"] = 180
    }
}

game:GetService("ReplicatedStorage").RemoteFunctions.PlaceUnit:InvokeServer(unpack(args))
wait(3)
local args = {
    [1] = "unit_gnome_npc",
    [2] = {
        ["Valid"] = true,
        ["Position"] = Vector3.new(-309.39697265625, 63.38456726074219, -171.59605407714844),
        ["CF"] = CFrame.new(-309.39697265625, 63.38456726074219, -171.59605407714844) * CFrame.Angles(-3.1415927410125732, -8.742277657347586e-08, -3.1415927410125732),
        ["Rotation"] = 180
    }
}

game:GetService("ReplicatedStorage").RemoteFunctions.PlaceUnit:InvokeServer(unpack(args))





			wait(3)
		end
	end
end

spawn(autoplace)

local function damntest()
while true do
local args = {
    [1] = "unit_tomato_plant",
    [2] = {
        ["Valid"] = true,
        ["Position"] = Vector3.new(-332.1462707519531, 63.38456726074219, -134.61106872558594),
        ["CF"] = CFrame.new(-332.1462707519531, 63.38456726074219, -134.61106872558594) * CFrame.Angles(-3.1415927410125732, -8.742277657347586e-08, -3.1415927410125732),
        ["Rotation"] = 180
    }
}

game:GetService("ReplicatedStorage").RemoteFunctions.PlaceUnit:InvokeServer(unpack(args))-- Script generated by SimpleSpy - credits to exx#9394

wait(3)
-- Script generated by SimpleSpy - credits to exx#9394

local args = {
    [1] = "unit_tomato_plant",
    [2] = {
        ["Valid"] = true,
        ["Position"] = Vector3.new(-309.78564453125, 63.38456726074219, -141.19989013671875),
        ["CF"] = CFrame.new(-309.78564453125, 63.38456726074219, -141.19989013671875) * CFrame.Angles(-3.1415927410125732, -8.742277657347586e-08, -3.1415927410125732),
        ["Rotation"] = 180
    }
}

game:GetService("ReplicatedStorage").RemoteFunctions.PlaceUnit:InvokeServer(unpack(args))
wait(3)
local args = {
    [1] = "unit_tomato_plant",
    [2] = {
        ["Valid"] = true,
        ["Position"] = Vector3.new(-309.39697265625, 63.38456726074219, -171.59605407714844),
        ["CF"] = CFrame.new(-309.39697265625, 63.38456726074219, -171.59605407714844) * CFrame.Angles(-3.1415927410125732, -8.742277657347586e-08, -3.1415927410125732),
        ["Rotation"] = 180
    }
}

game:GetService("ReplicatedStorage").RemoteFunctions.PlaceUnit:InvokeServer(unpack(args))

end
end
spawn(damntest)
local Players = game:GetService("Players")
local player = Players.LocalPlayer

local gui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
gui.Name = "AutoPermsGui"

local toggle = false
local button = Instance.new("TextButton", gui)
button.Size = UDim2.new(0, 80, 0, 35)
button.Position = UDim2.new(1, -90, 0, 10)
button.AnchorPoint = Vector2.new(0, 0)
button.Text = "AutoPerms"
button.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
button.TextScaled = true

local thread

button.MouseButton1Click:Connect(function()
	toggle = not toggle
	if toggle then
		button.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
		thread = coroutine.create(function()
			while toggle do
				local args = {
					"y"
				}
				game:GetService("ReplicatedStorage"):WaitForChild("RemoteFunctions"):WaitForChild("SkipWave"):InvokeServer(unpack(args))
				wait()
			end
		end)
		coroutine.resume(thread)
	else
		button.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
	end
end)

local function autorestart()
while true do

game:GetService("ReplicatedStorage"):WaitForChild("RemoteFunctions"):WaitForChild("RestartGame"):InvokeServer()
wait(1)
end
end
spawn(autorestart)


local Players = game:GetService("Players")
local player = Players.LocalPlayer

local gui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
gui.Name = "DifficultyVote"

local buttonNames = {"easy", "medium", "hard", "insane"}
local active = nil
local threads = {}

for i, name in ipairs(buttonNames) do
	local button = Instance.new("TextButton", gui)
	button.Size = UDim2.new(0, 100, 0, 40)
	button.Position = UDim2.new(0, 10, 0, 10 + ((i - 1) * 50))
	button.Text = name
	button.Name = name
	button.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
	button.TextScaled = true

	button.MouseButton1Click:Connect(function()
		if active == name then return end
		active = name
		for _, b in ipairs(gui:GetChildren()) do
			if b:IsA("TextButton") then
				b.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
			end
		end
		button.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
		for _, t in pairs(threads) do
			if t then
				coroutine.close(t)
			end
		end
		local diffArg = "dif_" .. name
		local thread = coroutine.create(function()
			while active == name do
				local args = {
					diffArg
				}
				game:GetService("ReplicatedStorage"):WaitForChild("RemoteFunctions"):WaitForChild("PlaceDifficultyVote"):InvokeServer(unpack(args))
				wait(1)
			end
		end)
		threads[name] = thread
		coroutine.resume(thread)
	end)
end
